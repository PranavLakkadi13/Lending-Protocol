{
  "address": "0x47ECE50E5BfcF19c3FcD601cf19e66772F682225",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "decimal",
          "type": "uint8"
        },
        {
          "internalType": "int256",
          "name": "_initialAnswer",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "int256",
          "name": "current",
          "type": "int256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        }
      ],
      "name": "AnswerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "startedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        }
      ],
      "name": "NewRound",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "Decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_answer",
          "type": "int256"
        }
      ],
      "name": "updateAnswer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "_answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startedAt",
          "type": "uint256"
        }
      ],
      "name": "updateRoundData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x25c52ce4e764defcf6289bbee805253bfcbce101504d9bb6642c80cfacbf854c",
  "receipt": {
    "to": null,
    "from": "0x1B150538E943F00127929f7eeB65754f7beB0B6d",
    "contractAddress": "0x47ECE50E5BfcF19c3FcD601cf19e66772F682225",
    "transactionIndex": 47,
    "gasUsed": "712134",
    "logsBloom": "0x
    "blockHash": "0xfb3d3c7dfa7207fdf03e42b0be8616106c60eb5999323b6ec9a68d6dedd85030",
    "transactionHash": "0x25c52ce4e764defcf6289bbee805253bfcbce101504d9bb6642c80cfacbf854c",
    "logs": [],
    "blockNumber": 6139293,
    "cumulativeGasUsed": "8418617",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "18",
    "300000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "f0b5da46baedf0ac7f22aaa42a0e8ae5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"decimal\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"_initialAnswer\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"current\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"name\":\"AnswerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_answer\",\"type\":\"int256\"}],\"name\":\"updateAnswer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"_answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startedAt\",\"type\":\"uint256\"}],\"name\":\"updateRoundData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Price_Feed/PriceFeedToken1.sol\":\"PriceFeedToken1\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0x2450923d9bc223f53bcbbd50a17405929ce5322200e8ce053c7918030cbb7844\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AggregatorInterface} from \\\"./AggregatorInterface.sol\\\";\\nimport {AggregatorV3Interface} from \\\"./AggregatorV3Interface.sol\\\";\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0xd5e222c5dd223490b766da8e45266101dd3635b1ba31d9b7a3a80d49f7640f85\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../shared/interfaces/AggregatorV2V3Interface.sol\\\";\\n\\n/**\\n * @title MockV3Aggregator\\n * @notice Based on the FluxAggregator contract\\n * @notice Use this contract when you need to test\\n * other contract's ability to read data from an\\n * aggregator contract, but how the aggregator got\\n * its answer is unimportant\\n */\\ncontract MockV3Aggregator is AggregatorV2V3Interface {\\n  uint256 public constant override version = 0;\\n\\n  uint8 public override decimals;\\n  int256 public override latestAnswer;\\n  uint256 public override latestTimestamp;\\n  uint256 public override latestRound;\\n\\n  mapping(uint256 => int256) public override getAnswer;\\n  mapping(uint256 => uint256) public override getTimestamp;\\n  mapping(uint256 => uint256) private getStartedAt;\\n\\n  constructor(uint8 _decimals, int256 _initialAnswer) {\\n    decimals = _decimals;\\n    updateAnswer(_initialAnswer);\\n  }\\n\\n  function updateAnswer(int256 _answer) public {\\n    latestAnswer = _answer;\\n    latestTimestamp = block.timestamp;\\n    latestRound++;\\n    getAnswer[latestRound] = _answer;\\n    getTimestamp[latestRound] = block.timestamp;\\n    getStartedAt[latestRound] = block.timestamp;\\n  }\\n\\n  function updateRoundData(uint80 _roundId, int256 _answer, uint256 _timestamp, uint256 _startedAt) public {\\n    latestRound = _roundId;\\n    latestAnswer = _answer;\\n    latestTimestamp = _timestamp;\\n    getAnswer[latestRound] = _answer;\\n    getTimestamp[latestRound] = _timestamp;\\n    getStartedAt[latestRound] = _startedAt;\\n  }\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    override\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\\n  {\\n    return (_roundId, getAnswer[_roundId], getStartedAt[_roundId], getTimestamp[_roundId], _roundId);\\n  }\\n\\n  function latestRoundData()\\n    external\\n    view\\n    override\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\\n  {\\n    return (\\n      uint80(latestRound),\\n      getAnswer[latestRound],\\n      getStartedAt[latestRound],\\n      getTimestamp[latestRound],\\n      uint80(latestRound)\\n    );\\n  }\\n\\n  function description() external pure override returns (string memory) {\\n    return \\\"v0.8/tests/MockV3Aggregator.sol\\\";\\n  }\\n}\\n\",\"keccak256\":\"0x774819d0045441fafc088add82707e22cda02ddca6c01bf049e19183ca3ed20f\",\"license\":\"MIT\"},\"contracts/Price_Feed/PriceFeedToken1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol\\\";\\n\\ncontract PriceFeedToken1 is MockV3Aggregator {\\n    constructor(uint8 decimal,int256 _initialAnswer) public MockV3Aggregator(decimal,_initialAnswer) {}\\n\\n    function Decimals() external view returns (uint8) {\\n        return decimals;\\n    }\\n} \",\"keccak256\":\"0x8f3a594151a7e03afe8fb0462013802cb6257ac29ec477b73b54d678663b5c4d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000b3838038062000b38833981810160405281019062000037919062000165565b8181816000806101000a81548160ff021916908360ff16021790555062000064816200006e60201b60201c565b5050505062000232565b8060018190555042600281905550600360008154809291906200009190620001e5565b919050555080600460006003548152602001908152602001600020819055504260056000600354815260200190815260200160002081905550426006600060035481526020019081526020016000208190555050565b600080fd5b600060ff82169050919050565b6200010481620000ec565b81146200011057600080fd5b50565b6000815190506200012481620000f9565b92915050565b6000819050919050565b6200013f816200012a565b81146200014b57600080fd5b50565b6000815190506200015f8162000134565b92915050565b600080604083850312156200017f576200017e620000e7565b5b60006200018f8582860162000113565b9250506020620001a2858286016200014e565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000620001f282620001db565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203620002275762000226620001ac565b5b600182019050919050565b6108f680620002426000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638205bf6a1161008c578063b5ab58dc11610066578063b5ab58dc146101f4578063b633620c14610224578063c6ceb50b14610254578063feaf968c14610272576100cf565b80638205bf6a146101865780639a6fc8f5146101a4578063a87a20ce146101d8576100cf565b8063313ce567146100d45780634aa2011f146100f257806350d25bcd1461010e57806354fd4d501461012c578063668a0f021461014a5780637284e41614610168575b600080fd5b6100dc610294565b6040516100e99190610525565b60405180910390f35b61010c600480360381019061010791906105f3565b6102a5565b005b61011661031a565b6040516101239190610669565b60405180910390f35b610134610320565b6040516101419190610693565b60405180910390f35b610152610325565b60405161015f9190610693565b60405180910390f35b61017061032b565b60405161017d919061073e565b60405180910390f35b61018e610368565b60405161019b9190610693565b60405180910390f35b6101be60048036038101906101b99190610760565b61036e565b6040516101cf95949392919061079c565b60405180910390f35b6101f260048036038101906101ed91906107ef565b6103eb565b005b61020e6004803603810190610209919061081c565b610462565b60405161021b9190610669565b60405180910390f35b61023e6004803603810190610239919061081c565b61047a565b60405161024b9190610693565b60405180910390f35b61025c610492565b6040516102699190610525565b60405180910390f35b61027a6104a8565b60405161028b95949392919061079c565b60405180910390f35b60008054906101000a900460ff1681565b8369ffffffffffffffffffff16600381905550826001819055508160028190555082600460006003548152602001908152602001600020819055508160056000600354815260200190815260200160002081905550806006600060035481526020019081526020016000208190555050505050565b60015481565b600081565b60035481565b60606040518060400160405280601f81526020017f76302e382f74657374732f4d6f636b563341676772656761746f722e736f6c00815250905090565b60025481565b600080600080600085600460008869ffffffffffffffffffff16815260200190815260200160002054600660008969ffffffffffffffffffff16815260200190815260200160002054600560008a69ffffffffffffffffffff16815260200190815260200160002054899450945094509450945091939590929450565b80600181905550426002819055506003600081548092919061040c90610878565b919050555080600460006003548152602001908152602001600020819055504260056000600354815260200190815260200160002081905550426006600060035481526020019081526020016000208190555050565b60046020528060005260406000206000915090505481565b60056020528060005260406000206000915090505481565b60008060009054906101000a900460ff16905090565b6000806000806000600354600460006003548152602001908152602001600020546006600060035481526020019081526020016000205460056000600354815260200190815260200160002054600354945094509450945094509091929394565b600060ff82169050919050565b61051f81610509565b82525050565b600060208201905061053a6000830184610516565b92915050565b600080fd5b600069ffffffffffffffffffff82169050919050565b61056481610545565b811461056f57600080fd5b50565b6000813590506105818161055b565b92915050565b6000819050919050565b61059a81610587565b81146105a557600080fd5b50565b6000813590506105b781610591565b92915050565b6000819050919050565b6105d0816105bd565b81146105db57600080fd5b50565b6000813590506105ed816105c7565b92915050565b6000806000806080858703121561060d5761060c610540565b5b600061061b87828801610572565b945050602061062c878288016105a8565b935050604061063d878288016105de565b925050606061064e878288016105de565b91505092959194509250565b61066381610587565b82525050565b600060208201905061067e600083018461065a565b92915050565b61068d816105bd565b82525050565b60006020820190506106a86000830184610684565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156106e85780820151818401526020810190506106cd565b60008484015250505050565b6000601f19601f8301169050919050565b6000610710826106ae565b61071a81856106b9565b935061072a8185602086016106ca565b610733816106f4565b840191505092915050565b600060208201905081810360008301526107588184610705565b905092915050565b60006020828403121561077657610775610540565b5b600061078484828501610572565b91505092915050565b61079681610545565b82525050565b600060a0820190506107b1600083018861078d565b6107be602083018761065a565b6107cb6040830186610684565b6107d86060830185610684565b6107e5608083018461078d565b9695505050505050565b60006020828403121561080557610804610540565b5b6000610813848285016105a8565b91505092915050565b60006020828403121561083257610831610540565b5b6000610840848285016105de565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610883826105bd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036108b5576108b4610849565b5b60018201905091905056fea2646970667358221220a89cd4ebc980a4fb06d0c717484d992937ef723070513993781e9fed0074da7264736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638205bf6a1161008c578063b5ab58dc11610066578063b5ab58dc146101f4578063b633620c14610224578063c6ceb50b14610254578063feaf968c14610272576100cf565b80638205bf6a146101865780639a6fc8f5146101a4578063a87a20ce146101d8576100cf565b8063313ce567146100d45780634aa2011f146100f257806350d25bcd1461010e57806354fd4d501461012c578063668a0f021461014a5780637284e41614610168575b600080fd5b6100dc610294565b6040516100e99190610525565b60405180910390f35b61010c600480360381019061010791906105f3565b6102a5565b005b61011661031a565b6040516101239190610669565b60405180910390f35b610134610320565b6040516101419190610693565b60405180910390f35b610152610325565b60405161015f9190610693565b60405180910390f35b61017061032b565b60405161017d919061073e565b60405180910390f35b61018e610368565b60405161019b9190610693565b60405180910390f35b6101be60048036038101906101b99190610760565b61036e565b6040516101cf95949392919061079c565b60405180910390f35b6101f260048036038101906101ed91906107ef565b6103eb565b005b61020e6004803603810190610209919061081c565b610462565b60405161021b9190610669565b60405180910390f35b61023e6004803603810190610239919061081c565b61047a565b60405161024b9190610693565b60405180910390f35b61025c610492565b6040516102699190610525565b60405180910390f35b61027a6104a8565b60405161028b95949392919061079c565b60405180910390f35b60008054906101000a900460ff1681565b8369ffffffffffffffffffff16600381905550826001819055508160028190555082600460006003548152602001908152602001600020819055508160056000600354815260200190815260200160002081905550806006600060035481526020019081526020016000208190555050505050565b60015481565b600081565b60035481565b60606040518060400160405280601f81526020017f76302e382f74657374732f4d6f636b563341676772656761746f722e736f6c00815250905090565b60025481565b600080600080600085600460008869ffffffffffffffffffff16815260200190815260200160002054600660008969ffffffffffffffffffff16815260200190815260200160002054600560008a69ffffffffffffffffffff16815260200190815260200160002054899450945094509450945091939590929450565b80600181905550426002819055506003600081548092919061040c90610878565b919050555080600460006003548152602001908152602001600020819055504260056000600354815260200190815260200160002081905550426006600060035481526020019081526020016000208190555050565b60046020528060005260406000206000915090505481565b60056020528060005260406000206000915090505481565b60008060009054906101000a900460ff16905090565b6000806000806000600354600460006003548152602001908152602001600020546006600060035481526020019081526020016000205460056000600354815260200190815260200160002054600354945094509450945094509091929394565b600060ff82169050919050565b61051f81610509565b82525050565b600060208201905061053a6000830184610516565b92915050565b600080fd5b600069ffffffffffffffffffff82169050919050565b61056481610545565b811461056f57600080fd5b50565b6000813590506105818161055b565b92915050565b6000819050919050565b61059a81610587565b81146105a557600080fd5b50565b6000813590506105b781610591565b92915050565b6000819050919050565b6105d0816105bd565b81146105db57600080fd5b50565b6000813590506105ed816105c7565b92915050565b6000806000806080858703121561060d5761060c610540565b5b600061061b87828801610572565b945050602061062c878288016105a8565b935050604061063d878288016105de565b925050606061064e878288016105de565b91505092959194509250565b61066381610587565b82525050565b600060208201905061067e600083018461065a565b92915050565b61068d816105bd565b82525050565b60006020820190506106a86000830184610684565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156106e85780820151818401526020810190506106cd565b60008484015250505050565b6000601f19601f8301169050919050565b6000610710826106ae565b61071a81856106b9565b935061072a8185602086016106ca565b610733816106f4565b840191505092915050565b600060208201905081810360008301526107588184610705565b905092915050565b60006020828403121561077657610775610540565b5b600061078484828501610572565b91505092915050565b61079681610545565b82525050565b600060a0820190506107b1600083018861078d565b6107be602083018761065a565b6107cb6040830186610684565b6107d86060830185610684565b6107e5608083018461078d565b9695505050505050565b60006020828403121561080557610804610540565b5b6000610813848285016105a8565b91505092915050565b60006020828403121561083257610831610540565b5b6000610840848285016105de565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610883826105bd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036108b5576108b4610849565b5b60018201905091905056fea2646970667358221220a89cd4ebc980a4fb06d0c717484d992937ef723070513993781e9fed0074da7264736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 117,
        "contract": "contracts/Price_Feed/PriceFeedToken1.sol:PriceFeedToken1",
        "label": "decimals",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 120,
        "contract": "contracts/Price_Feed/PriceFeedToken1.sol:PriceFeedToken1",
        "label": "latestAnswer",
        "offset": 0,
        "slot": "1",
        "type": "t_int256"
      },
      {
        "astId": 123,
        "contract": "contracts/Price_Feed/PriceFeedToken1.sol:PriceFeedToken1",
        "label": "latestTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 126,
        "contract": "contracts/Price_Feed/PriceFeedToken1.sol:PriceFeedToken1",
        "label": "latestRound",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 131,
        "contract": "contracts/Price_Feed/PriceFeedToken1.sol:PriceFeedToken1",
        "label": "getAnswer",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_int256)"
      },
      {
        "astId": 136,
        "contract": "contracts/Price_Feed/PriceFeedToken1.sol:PriceFeedToken1",
        "label": "getTimestamp",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 140,
        "contract": "contracts/Price_Feed/PriceFeedToken1.sol:PriceFeedToken1",
        "label": "getStartedAt",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}